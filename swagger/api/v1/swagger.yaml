---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/authors":
    get:
      summary: retrieves authors
      tags:
      - Authors
      description: Retrieves authors.
      parameters:
      - name: competence_id
        in: path
        items:
          type: integer
        description: Competence IDs
        required: true
        schema:
          type: array
      - name: page
        in: path
        description: Page number
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                  - id: 1
                    first_name: Itzel
                    last_name: Lamas
                  - id: 2
                    first_name: Luis
                    last_name: León
                  - id: 3
                    first_name: Martín
                    last_name: Mora
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/author"
    post:
      summary: create author
      tags:
      - Authors
      description: Create a new author.
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                    id: 4
                    first_name: Test
                    last_name: Author
              schema:
                "$ref": "#/components/schemas/author"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/author"
  "/api/v1/authors/{id}":
    get:
      summary: show author
      tags:
      - Authors
      description: Get the details for a particular author
      parameters:
      - name: id
        in: path
        description: The ID for the author
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                    id: 5
                    first_name: Test
                    last_name: Author
              schema:
                "$ref": "#/components/schemas/author"
        '404':
          description: not found
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Couldn't find Author with 'id'=999999999
              schema:
                "$ref": "#/components/schemas/not_found"
    put:
      summary: update author
      tags:
      - Authors
      description: Update an author
      parameters:
      - name: id
        in: path
        description: The ID for the author
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                    id: 6
                    first_name: New
                    last_name: Name
              schema:
                "$ref": "#/components/schemas/author"
        '404':
          description: not found
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Couldn't find Author with 'id'=999999999
              schema:
                "$ref": "#/components/schemas/not_found"
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Last name can't be blank
              schema:
                "$ref": "#/components/schemas/unprocessable_entity"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/author"
    delete:
      summary: delete author
      tags:
      - Authors
      description: Delete an author
      parameters:
      - name: id
        in: path
        description: The ID for the author
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: successful
        '404':
          description: not found
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Couldn't find Author with 'id'=999999999
              schema:
                "$ref": "#/components/schemas/not_found"
  "/api/v1/competences":
    get:
      summary: retrieves competences
      tags:
      - Competences
      description: Retrieves competences.
      parameters:
      - name: page
        in: path
        description: Page number
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                  - id: 3
                    name: eius
                  - id: 4
                    name: assumenda
                  - id: 5
                    name: doloremque
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/competence"
    post:
      summary: create competence
      tags:
      - Competences
      description: Create a new competence.
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                    id: 6
                    name: Programming
              schema:
                "$ref": "#/components/schemas/competence"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/competence"
  "/api/v1/competences/{id}":
    get:
      summary: show competence
      tags:
      - Competences
      description: Get the details for a particular competence
      parameters:
      - name: id
        in: path
        description: The ID for the competence
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                    id: 7
                    name: Programming
              schema:
                "$ref": "#/components/schemas/competence"
        '404':
          description: not found
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Couldn't find Competence with 'id'=999999999
              schema:
                "$ref": "#/components/schemas/not_found"
    put:
      summary: update competence
      tags:
      - Competences
      description: Update an competence
      parameters:
      - name: id
        in: path
        description: The ID for the competence
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                    id: 8
                    name: Coding
              schema:
                "$ref": "#/components/schemas/competence"
        '404':
          description: not found
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Couldn't find Competence with 'id'=999999999
              schema:
                "$ref": "#/components/schemas/not_found"
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Name can't be blank
              schema:
                "$ref": "#/components/schemas/unprocessable_entity"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/competence"
    delete:
      summary: delete competence
      tags:
      - Competences
      description: Delete an competence
      parameters:
      - name: id
        in: path
        description: The ID for the competence
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: successful
        '404':
          description: not found
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Couldn't find Competence with 'id'=999999999
              schema:
                "$ref": "#/components/schemas/not_found"
  "/api/v1/courses":
    get:
      summary: retrieves courses
      tags:
      - Courses
      description: Retrieves courses.
      parameters:
      - name: page
        in: path
        description: Page number
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                  - id: 5
                    name: Optio eum iure voluptatem dolores eius amet labore.
                    description: '["Inventore voluptas nemo dicta iste accusantium
                      provident velit amet. Eius veniam fugit labore blanditiis. Voluptas
                      dignissimos placeat ut quam blanditiis quia nisi alias.", "Architecto
                      fugiat velit ex provident veniam quia est dolorum. Voluptas
                      non consequuntur maxime esse rerum. Quidem ad possimus culpa
                      perspiciatis enim est explicabo.", "Cupiditate doloribus sit
                      incidunt perspiciatis mollitia rerum molestiae. Unde et non
                      odit consequatur. Ab praesentium ex sed natus. Libero similique
                      non nulla labore exercitationem neque earum. Perferendis assumenda
                      asperiores soluta eaque."]'
                    author:
                      id: 10
                      first_name: Magali
                      last_name: Aguirre
                    competences:
                    - id: 11
                      name: beatae
                    - id: 12
                      name: molestias
                  - id: 6
                    name: Autem sunt eum ad consequatur.
                    description: '["Natus vero quo alias nemo. Animi tenetur cupiditate
                      corrupti beatae tempora. Voluptates blanditiis labore amet assumenda
                      porro.", "Minima vel tempora mollitia repellat. Harum molestias
                      tenetur in pariatur quibusdam rem cumque eaque. Unde ab nisi
                      delectus reiciendis doloremque sapiente in fugiat. Eos ex illum
                      sapiente quas similique ipsam.", "Suscipit corporis iure maxime
                      illum iste quos natus. Dolore suscipit enim illo optio. Ad dignissimos
                      repellendus doloribus soluta similique fugit ullam."]'
                    author:
                      id: 11
                      first_name: Nadia
                      last_name: Cadenas
                    competences:
                    - id: 11
                      name: beatae
                  - id: 7
                    name: Aspernatur nemo sequi sapiente animi consequatur fugit.
                    description: '["Magni maxime harum corrupti nemo doloremque atque
                      voluptas repellendus. Eligendi fuga adipisci illo ullam unde.
                      Suscipit fugiat autem assumenda maxime accusamus voluptates.
                      Commodi dolorum eos optio quod voluptatum consequuntur vel explicabo.",
                      "Alias delectus rem ullam quaerat debitis numquam. Ut eaque
                      laboriosam veniam quibusdam in. Alias quisquam culpa dicta aut
                      enim.", "Porro optio eligendi laborum eveniet earum dolor. Necessitatibus
                      ratione reprehenderit pariatur dolor repellendus delectus earum
                      sed. Fugit eligendi cumque eveniet fuga quia omnis eius beatae."]'
                    author:
                      id: 12
                      first_name: Virginia
                      last_name: Quintal
                    competences: []
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/course"
    post:
      summary: create course
      tags:
      - Courses
      description: Create a new course.
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                    id: 8
                    name: Programming
                    description: Some tutorial
                    author:
                      id: 13
                      first_name: Carla
                      last_name: Baños
                    competences: []
              schema:
                "$ref": "#/components/schemas/course"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/course"
  "/api/v1/courses/{id}":
    get:
      summary: show course
      tags:
      - Courses
      description: Get the details for a particular course
      parameters:
      - name: id
        in: path
        description: The ID for the course
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                    id: 9
                    name: Dolore aliquid beatae pariatur corporis quaerat magni dolor
                      vitae.
                    description: '["Explicabo laborum ratione iure quas non iste.
                      Magni incidunt tempore optio accusantium asperiores numquam.
                      Nulla nobis delectus labore voluptatibus. A atque nulla esse
                      beatae.", "Sed alias ab debitis aliquid fugiat. Soluta similique
                      dolore sunt illum. Repellat amet autem harum excepturi voluptas
                      fugit laboriosam eaque. Quaerat alias minus id quae minima.
                      Suscipit deleniti nihil possimus quis vel excepturi.", "Error
                      omnis cupiditate quibusdam quas laboriosam esse eius. Cupiditate
                      doloremque dolores omnis et nulla tempore officia. Eos aspernatur
                      fugit fuga laboriosam veritatis fugiat ipsa. Provident iste
                      optio ullam aperiam voluptatibus. Eum quo at voluptas nam incidunt."]'
                    author:
                      id: 14
                      first_name: Claudia
                      last_name: Fierro
                    competences:
                    - id: 17
                      name: illum
                    - id: 18
                      name: illo
              schema:
                "$ref": "#/components/schemas/course"
        '404':
          description: not found
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Couldn't find Course with 'id'=999999999
              schema:
                "$ref": "#/components/schemas/not_found"
    put:
      summary: update course
      tags:
      - Courses
      description: Update an course
      parameters:
      - name: id
        in: path
        description: The ID for the course
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                test_example:
                  value:
                    id: 10
                    name: Programming
                    description: Some tutorial
                    author:
                      id: 15
                      first_name: Sonia
                      last_name: Gordillo
                    competences:
                    - id: 23
                      name: perspiciatis
                    - id: 24
                      name: quos
              schema:
                "$ref": "#/components/schemas/course"
        '404':
          description: not found
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Couldn't find Course with 'id'=999999999
              schema:
                "$ref": "#/components/schemas/not_found"
        '422':
          description: unprocessable entity
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Description can't be blank
              schema:
                "$ref": "#/components/schemas/unprocessable_entity"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/course"
    delete:
      summary: delete course
      tags:
      - Courses
      description: Delete an course
      parameters:
      - name: id
        in: path
        description: The ID for the course
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: successful
        '404':
          description: not found
          content:
            application/json:
              examples:
                test_example:
                  value:
                    errors:
                    - Couldn't find Course with 'id'=999999999
              schema:
                "$ref": "#/components/schemas/not_found"
components:
  schemas:
    author:
      type: object
      required:
      - id
      - first_name
      - last_name
      properties:
        id:
          type: integer
          example: '1'
        first_name:
          type: string
          example: Maxim
        last_name:
          type: string
          example: Pariyskiy
    competence:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: integer
          example: '1'
        name:
          type: string
          example: Programming
    course:
      type: object
      required:
      - id
      - name
      properties:
        id:
          type: integer
          example: '1'
        name:
          type: string
          example: Programming
        description:
          type: string
          example: Some tutorial
        author:
          type: hash
          properties:
            id:
              type: integer
              example: '1'
            first_name:
              type: string
              example: Maxim
            last_name:
              type: string
              example: Pariyskiy
        competences:
          type: array
          items:
            properties:
              id:
                type: integer
                example: '1'
              name:
                type: string
                example: Programming
    not_found:
      type: object
    unprocessable_entity:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: www.example.com
